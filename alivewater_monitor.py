import os
import time
import json
import logging
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from telegram import Bot
from telegram.ext import Updater, CommandHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "login_url": "https://my.alivewater.cloud",
    "sales_url": "https://my.alivewater.cloud/sales",
    "terminals_url": "https://my.alivewater.cloud/terminals",
    "telegram_token": os.getenv("TELEGRAM_TOKEN"),
    "telegram_admin_ids": [1371753467, 867982256],
    "login": os.getenv("LOGIN"),
    "password": os.getenv("PASSWORD"),
    "data_file": "data.json"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
bot = Bot(token=CONFIG['telegram_token'])

def load_data():
    try:
        with open(CONFIG['data_file'], 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"last_sales": [], "last_notifications": []}

def save_data(data):
    with open(CONFIG['data_file'], 'w') as f:
        json.dump(data, f)

def init_browser():
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--disable-gpu")
    options.add_argument("--remote-debugging-port=9222")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å DevToolsActivePort
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-infobars")
    options.add_argument("--disable-browser-side-navigation")
    options.add_argument("--disable-features=VizDisplayCompositor")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option("useAutomationExtension", False)
    
    # –î–ª—è GitHub Actions
    options.binary_location = "/usr/bin/chromium-browser"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π chromedriver
    service = Service(executable_path="/usr/bin/chromedriver")
    driver = webdriver.Chrome(service=service, options=options)
    driver.implicitly_wait(10)
    return driver

def login(driver):
    try:
        driver.get(CONFIG['login_url'])
        time.sleep(2)
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        try:
            accept_btn = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "button.ant-btn-primary"))
            )
            accept_btn.click()
            time.sleep(1)
        except Exception as e:
            logger.warning(f"–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {str(e)}")
        
        # –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
        driver.find_element(By.CSS_SELECTOR, "input[name='login']").send_keys(CONFIG['login'])
        time.sleep(0.5)
        driver.find_element(By.CSS_SELECTOR, "input[name='password']").send_keys(CONFIG['password'])
        time.sleep(0.5)
        driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "._container_iuuwv_1"))
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return False

def check_sales(driver):
    try:
        driver.get(CONFIG['sales_url'])
        time.sleep(3)
        
        rows = driver.find_elements(By.CSS_SELECTOR, "table tbody tr")
        sales = []
        for row in rows:
            cols = row.find_elements(By.TAG_NAME, "td")
            if len(cols) >= 5:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É SVG
                payment_method = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                payment_icons = cols[5].find_elements(By.TAG_NAME, "svg")
                
                for icon in payment_icons:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞ path
                    paths = icon.find_elements(By.TAG_NAME, "path")
                    for path in paths:
                        d_attr = path.get_attribute("d")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —á–∞—Å—Ç—è–º –ø—É—Ç–∏
                        if d_attr:
                            # –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
                            if "v8c0 6.6-5.4 12-12 12" in d_attr:
                                payment_method = "üí≥ –ö–∞—Ä—Ç–∞"
                                break
                                
                            # –ö—É–ø—é—Ä—ã
                            elif "c-53.02 0-96 50.14-96 112" in d_attr:
                                payment_method = "üíµ –ö—É–ø—é—Ä—ã"
                                break
                                
                            # –ú–æ–Ω–µ—Ç—ã
                            elif "c-48.6 0-92.6 9-124.5 23.4" in d_attr:
                                payment_method = "ü™ô –ú–æ–Ω–µ—Ç—ã"
                                break
                
                sales.append({
                    "number": cols[0].text,
                    "address": cols[1].text,
                    "time": cols[2].text,
                    "liters": cols[3].text,
                    "total": cols[4].text,
                    "payment": payment_method
                })
        return sales
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–¥–∞–∂: {str(e)}")
        return []

def check_terminals(driver):
    try:
        driver.get(CONFIG['terminals_url'])
        time.sleep(3)
        
        warnings = driver.find_elements(By.CSS_SELECTOR, "svg[data-icon='exclamation-circle']")
        if not warnings:
            return []
        
        problems = []
        terminal_links = driver.find_elements(By.CSS_SELECTOR, "a[href^='/terminal/']")
        for link in terminal_links:
            parent_html = link.find_element(By.XPATH, "./..").get_attribute("innerHTML")
            if any(warning.get_attribute("outerHTML") in parent_html for warning in warnings):
                problems.append({
                    "terminal": link.text,
                    "url": link.get_attribute("href")
                })
        return problems
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤: {str(e)}")
        return []

def send_telegram_notification(message):
    for chat_id in CONFIG['telegram_admin_ids']:
        try:
            bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def format_sales(sales):
    if not sales:
        return "üõçÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂"
    
    message = "üí∞ <b>–ù–û–í–´–ï –ü–†–û–î–ê–ñ–ò</b> üí∞\n\n"
    for sale in sales:
        message += (
            f"üîπ <b>–ü—Ä–æ–¥–∞–∂–∞ #{sale['number']}</b>\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {sale['address']}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {sale['time']}\n"
            f"üíß <b>–õ–∏—Ç—Ä—ã:</b> {sale['liters']}\n"
            f"üí∏ <b>–°—É–º–º–∞:</b> {sale['total']} —Ä—É–±.\n"
            f"üßæ <b>–û–ø–ª–∞—Ç–∞:</b> {sale['payment']}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    message += f"\n–í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂: <b>{len(sales)}</b>"
    return message

def format_problems(problems):
    if not problems:
        return "‚úÖ –ü—Ä–æ–±–ª–µ–º —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    
    message = "‚ö†Ô∏è <b>–ü–†–û–ë–õ–ï–ú–´ –° –¢–ï–†–ú–ò–ù–ê–õ–ê–ú–ò</b> ‚ö†Ô∏è\n\n"
    for problem in problems:
        message += (
            f"üî¥ <b>–¢–µ—Ä–º–∏–Ω–∞–ª:</b> {problem['terminal']}\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {problem['url']}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    message += f"\n–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤: <b>{len(problems)}</b>"
    return message

def start(update, context):
    menu_text = (
        "üö∞ <b>–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ AliveWater</b> üö∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "üí≥ /check_sales - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏\n"
        "‚ö†Ô∏è /check_terminals - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤\n"
        "‚ÑπÔ∏è /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "üÜò /help - –ü–æ–º–æ—â—å"
    )
    update.message.reply_text(menu_text, parse_mode="HTML")

def help_command(update, context):
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:\n"
        "- –ù–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –≤–æ–¥—ã üíß\n"
        "- –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞–º–∏ ‚ö†Ô∏è\n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üí≥ /check_sales - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏\n"
        "‚ö†Ô∏è /check_terminals - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤\n"
        "‚ÑπÔ∏è /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "üÜò /help - –ü–æ–º–æ—â—å"
    )
    update.message.reply_text(help_text, parse_mode="HTML")

def check_sales_command(update, context):
    if update.message.from_user.id not in CONFIG['telegram_admin_ids']:
        update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏...")
    try:
        driver = init_browser()
        if login(driver):
            sales = check_sales(driver)
            data = load_data()
            
            new_sales = [s for s in sales if s not in data['last_sales']]
            if new_sales:
                message = format_sales(new_sales)
                send_telegram_notification(message)
                data['last_sales'] = sales
                save_data(data)
                update.message.reply_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_sales)} –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂!", parse_mode="HTML")
            else:
                update.message.reply_text("üõçÔ∏è –ù–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", parse_mode="HTML")
        else:
            update.message.reply_text("üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", parse_mode="HTML")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_sales_command: {str(e)}")
    finally:
        driver.quit()

def check_terminals_command(update, context):
    if update.message.from_user.id not in CONFIG['telegram_admin_ids']:
        update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤...")
    try:
        driver = init_browser()
        if login(driver):
            problems = check_terminals(driver)
            data = load_data()
            
            new_problems = [p for p in problems if p not in data['last_notifications']]
            if new_problems:
                message = format_problems(new_problems)
                send_telegram_notification(message)
                data['last_notifications'] = problems
                save_data(data)
                update.message.reply_text(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(new_problems)} –ø—Ä–æ–±–ª–µ–º —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞–º–∏!", parse_mode="HTML")
            else:
                update.message.reply_text("‚úÖ –ü—Ä–æ–±–ª–µ–º —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", parse_mode="HTML")
        else:
            update.message.reply_text("üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", parse_mode="HTML")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_terminals_command: {str(e)}")
    finally:
        driver.quit()

def status_command(update, context):
    status_text = (
        "üü¢ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ AliveWater —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        "–°–ª–µ–¥—É—é—â–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"
    )
    update.message.reply_text(status_text, parse_mode="HTML")

def main_monitoring():
    logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    try:
        driver = init_browser()
        if login(driver):
            data = load_data()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂
            sales = check_sales(driver)
            new_sales = [s for s in sales if s not in data['last_sales']]
            if new_sales:
                send_telegram_notification(format_sales(new_sales))
                data['last_sales'] = sales
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
            problems = check_terminals(driver)
            new_problems = [p for p in problems if p not in data['last_notifications']]
            if new_problems:
                send_telegram_notification(format_problems(new_problems))
                data['last_notifications'] = problems
            
            save_data(data)
            logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_monitoring: {str(e)}")
    finally:
        driver.quit()

def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
    updater = Updater(CONFIG['telegram_token'], use_context=True)
    dispatcher = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("check_sales", check_sales_command))
    dispatcher.add_handler(CommandHandler("check_terminals", check_terminals_command))
    dispatcher.add_handler(CommandHandler("status", status_command))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    
    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    while True:
        main_monitoring()
        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    main()
